import fs from 'fs';
import path from 'path';
import { RawArticle } from '../src/types';
import { encryptionService } from '../src/services/encryptionService';

const countries = [
  'Argentina', 'Brasil', 'Chile', 'Colombia', 'M√©xico', 'Per√∫', 'Uruguay', 
  'Ecuador', 'Bolivia', 'Paraguay', 'Venezuela', 'Espa√±a', 'Estados Unidos',
  'Francia', 'Alemania', 'Italia', 'Reino Unido', 'Canad√°', 'Australia'
];

const agents = [
  'Comercial', 'T√©cnico', 'Administrativo', 'Gerencial', 'Financiero',
  'Marketing', 'Ventas', 'Soporte', 'Desarrollo', 'Consultor√≠a', 'XYZ'
];

const names = [
  'Juan P√©rez', 'Mar√≠a Garc√≠a', 'Carlos L√≥pez', 'Ana Mart√≠nez', 'Luis Rodr√≠guez',
  'Carmen S√°nchez', 'Jos√© Gonz√°lez', 'Laura Fern√°ndez', 'Miguel Torres', 'Elena Ram√≠rez',
  'David Silva', 'Patricia Morales', 'Fernando Castro', 'Isabel Ortega', 'Roberto Delgado',
  'M√≥nica Herrera', 'Antonio Jim√©nez', 'Rosa Mendoza', 'Francisco Ruiz', 'Pilar Vargas',
  'Santiago D√≠az', 'Valentina Rojas', 'Sebasti√°n Vargas', 'Camila Moreno', 'Mat√≠as Herrera',
  'Sof√≠a Castillo', 'Nicol√°s Guerrero', 'Gabriela Soto', 'Diego Mendez', 'Andrea Vega'
];

/**
 * Genera datos de prueba para los art√≠culos
 */
function generateMockArticles(count: number = 10000): RawArticle[] {
  const articles: RawArticle[] = [];
  
  for (let i = 0; i < count; i++) {
    const now = new Date();
    const randomDate = new Date(now.getTime() - Math.random() * 2 * 365 * 24 * 60 * 60 * 1000); // √öltimos 2 a√±os
    
    // A√±adir algunas fechas futuras para probar el estado "Pendiente"
    if (Math.random() < 0.1) {
      randomDate.setTime(now.getTime() + Math.random() * 30 * 24 * 60 * 60 * 1000); // Pr√≥ximos 30 d√≠as
    }

    const country = countries[Math.floor(Math.random() * countries.length)];
    const agent = agents[Math.floor(Math.random() * agents.length)];
    const name = names[Math.floor(Math.random() * names.length)];
    
    // Crear algunos art√≠culos que deben ser excluidos (fecha pasada + agente XYZ + pa√≠s Chile)
    let finalCountry = country;
    let finalAgent = agent;
    let finalDate = randomDate;
    
    if (Math.random() < 0.05) { // 5% de art√≠culos para exclusi√≥n
      finalCountry = 'Chile';
      finalAgent = 'XYZ';
      finalDate = new Date(now.getTime() - Math.random() * 365 * 24 * 60 * 60 * 1000); // Fecha pasada
    }

    // Generar algunos montos negativos o cero para probar validaciones
    let amount = Math.round((Math.random() * 10000 + 100) * 100) / 100;
    if (Math.random() < 0.05) { // 5% con montos inv√°lidos
      amount = Math.random() < 0.5 ? -Math.abs(amount) : 0;
    }

    const article: RawArticle = {
      id: `article-${String(i + 1).padStart(5, '0')}`,
      fecha: finalDate.toISOString(),
      nombreEncriptado: encryptionService.encrypt(name),
      montoOriginal: amount,
      pais: finalCountry,
      agente: finalAgent
    };
    
    articles.push(article);
  }
  
  return articles;
}

/**
 * Genera el archivo articles.json
 */
async function generateArticlesFile(): Promise<void> {
  try {
    console.log('Generando art√≠culos de prueba...');
    
    const articles = generateMockArticles(10000);
    const outputPath = path.join(__dirname, 'articles.json');
    
    await fs.promises.writeFile(outputPath, JSON.stringify(articles, null, 2));
    
    console.log(`‚úÖ Se generaron ${articles.length} art√≠culos en ${outputPath}`);
    console.log(`üìä Estad√≠sticas:`);
    
    const stats = {
      total: articles.length,
      conAgentesXYZ: articles.filter(a => a.agente === 'XYZ').length,
      enChile: articles.filter(a => a.pais === 'Chile').length,
      montosNegativos: articles.filter(a => a.montoOriginal <= 0).length,
      fechasFuturas: articles.filter(a => new Date(a.fecha) > new Date()).length
    };
    
    console.log(`   - Total: ${stats.total}`);
    console.log(`   - Agentes XYZ: ${stats.conAgentesXYZ}`);
    console.log(`   - En Chile: ${stats.enChile}`);
    console.log(`   - Montos inv√°lidos: ${stats.montosNegativos}`);
    console.log(`   - Fechas futuras: ${stats.fechasFuturas}`);
    
  } catch (error) {
    console.error('Error generando art√≠culos:', error);
    process.exit(1);
  }
}

// Ejecutar si este archivo es llamado directamente
if (require.main === module) {
  generateArticlesFile();
}

export { generateMockArticles };
